###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\.env ######
# Database Configuration
MYSQL_ROOT_PASSWORD=secure_root_pw123
MYSQL_DATABASE=employees
MYSQL_USER=myuser
MYSQL_PASSWORD=userpass123
MYSQL_HOST=mysql-db
MYSQL_PORT=3306

# Monitor User Configuration
MYSQL_MONITOR_USER=monitor
MYSQL_MONITOR_PASSWORD=monitorpass123

# Performance Settings
BATCH_SIZE=1000
TOTAL_EMPLOYEES=10000

# API Configuration
API_PORT=3000

# Load Generator Configuration
K6_VUS=50
K6_DURATION=30m

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\.env.example ######
MYSQL_ROOT_PASSWORD=demo123
MYSQL_DATABASE=employees
MYSQL_USER=myuser
MYSQL_PASSWORD=demopass

# New Relic MySQL Monitor User
MYSQL_MONITOR_USER=newrelic
MYSQL_MONITOR_PASSWORD=nrpass123

# API Configuration
API_PORT=3000

# Data Generation
BATCH_SIZE=5000
TOTAL_EMPLOYEES=100000

# Performance Testing
ENABLE_SLOW_QUERIES=true
SLOW_QUERY_TIME=0.5

# Load Generator Configuration
K6_VUS=100
K6_DURATION=30m

# New Relic Configuration
NEW_RELIC_LICENSE_KEY=your_license_key
NEW_RELIC_APP_NAME=MySQL-Demo

# Environment
NODE_ENV=development

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\.gitignore ######
# Environment files
.env*
!.env.example

# Logs
*.log
logs/
mysql_logs/

# Dependencies
node_modules/
__pycache__/
*.pyc

# IDE and editors
.vscode/
.idea/
*.swp
*.swo
*~

# Build and data directories
mysql_data/
data/

# Docker
.docker/
docker-compose.override.yml

# Temporary files
*.tmp
*.temp
.DS_Store

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\AzureDeploy.sh ######
#!/bin/bash
set -e

# Load environment variables
if [ -f .env ]; then
    export $(grep -v '^#' .env | xargs)
else
    echo ".env file not found!"
    exit 1
fi

# Detect environment
if [ -f /.dockerenv ]; then
    ENVIRONMENT="docker"
else
    ENVIRONMENT="vm"
fi

echo "[INFO] Starting deployment in ${ENVIRONMENT} environment..."

# VM-specific setup
if [ "$ENVIRONMENT" = "vm" ]; then
    echo "[INFO] Setting up VM environment..."
    
    # Install required packages
    if ! command -v mysql &> /dev/null; then
        sudo apt-get update
        sudo apt-get install -y mysql-server python3 python3-pip
        sudo systemctl start mysql
    fi

    # Copy MySQL configs
    sudo mkdir -p /etc/mysql/conf.d
    sudo cp db-setup/config/mysql.cnf /etc/mysql/conf.d/custom_mysql.cnf
    sudo cp db-setup/config/performance-schema.cnf /etc/mysql/conf.d/performance_schema.cnf
    sudo systemctl restart mysql
fi

# Wait for MySQL
echo "[INFO] Waiting for MySQL..."
max_attempts=30
attempt=1
while ! mysqladmin ping -h"localhost" -u"root" -p"${MYSQL_ROOT_PASSWORD}" --silent; do
    if [ $attempt -eq $max_attempts ]; then
        echo "Failed to connect to MySQL after $max_attempts attempts"
        exit 1
    fi
    echo "Attempt $attempt of $max_attempts: MySQL not ready, waiting..."
    sleep 2
    ((attempt++))
done

# Initialize database
echo "[INFO] Running migrations..."
for migration in db-setup/migrations/V*.sql; do
    echo "Running migration: $migration"
    mysql -u root -p"${MYSQL_ROOT_PASSWORD}" < "$migration"
done

# Setup Python environment and run data scripts
echo "[INFO] Setting up Python environment..."
pip3 install --no-cache-dir -r db-setup/requirements.txt

echo "[INFO] Running data setup scripts..."
cd db-setup/scripts
python3 create_tables.py
python3 departments_data.py
python3 load_data.py
cd ../..

# If in Docker environment, handle additional services
if [ "$ENVIRONMENT" = "docker" ]; then
    echo "[INFO] Starting Docker services..."
    docker-compose up -d api load-generator
fi

echo "[INFO] Deployment completed successfully!"

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\combined_content.txt ######
###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\.env ######
# Database Configuration
MYSQL_ROOT_PASSWORD=secure_root_pw123
MYSQL_DATABASE=employees
MYSQL_USER=myuser
MYSQL_PASSWORD=userpass123
MYSQL_HOST=mysql-db
MYSQL_PORT=3306

# Monitor User Configuration
MYSQL_MONITOR_USER=monitor
MYSQL_MONITOR_PASSWORD=monitorpass123

# Performance Settings
BATCH_SIZE=1000
TOTAL_EMPLOYEES=10000

# API Configuration
API_PORT=3000

# Load Generator Configuration
K6_VUS=50
K6_DURATION=30m

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\.env.example ######
MYSQL_ROOT_PASSWORD=demo123
MYSQL_DATABASE=employees
MYSQL_USER=myuser
MYSQL_PASSWORD=demopass

# New Relic MySQL Monitor User
MYSQL_MONITOR_USER=newrelic
MYSQL_MONITOR_PASSWORD=nrpass123

# API Configuration
API_PORT=3000

# Data Generation
BATCH_SIZE=5000
TOTAL_EMPLOYEES=100000

# Performance Testing
ENABLE_SLOW_QUERIES=true
SLOW_QUERY_TIME=0.5

# Load Generator Configuration
K6_VUS=100
K6_DURATION=30m

# New Relic Configuration
NEW_RELIC_LICENSE_KEY=your_license_key
NEW_RELIC_APP_NAME=MySQL-Demo

# Environment
NODE_ENV=development

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\.gitignore ######
# Environment files
.env*
!.env.example

# Logs
*.log
logs/
mysql_logs/

# Dependencies
node_modules/
__pycache__/
*.pyc

# IDE and editors
.vscode/
.idea/
*.swp
*.swo
*~

# Build and data directories
mysql_data/
data/

# Docker
.docker/
docker-compose.override.yml

# Temporary files
*.tmp
*.temp
.DS_Store

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\AzureDeploy.sh ######
#!/bin/bash
set -e

# Load environment variables
if [ -f .env ]; then
    export $(grep -v '^#' .env | xargs)
else
    echo ".env file not found!"
    exit 1
fi

# Detect environment
if [ -f /.dockerenv ]; then
    ENVIRONMENT="docker"
else
    ENVIRONMENT="vm"
fi

echo "[INFO] Starting deployment in ${ENVIRONMENT} environment..."

# VM-specific setup
if [ "$ENVIRONMENT" = "vm" ]; then
    echo "[INFO] Setting up VM environment..."
    
    # Install required packages
    if ! command -v mysql &> /dev/null; then
        sudo apt-get update
        sudo apt-get install -y mysql-server python3 python3-pip
        sudo systemctl start mysql
    fi

    # Copy MySQL configs
    sudo mkdir -p /etc/mysql/conf.d
    sudo cp db-setup/config/mysql.cnf /etc/mysql/conf.d/custom_mysql.cnf
    sudo cp db-setup/config/performance-schema.cnf /etc/mysql/conf.d/performance_schema.cnf
    sudo systemctl restart mysql
fi

# Wait for MySQL
echo "[INFO] Waiting for MySQL..."
max_attempts=30
attempt=1
while ! mysqladmin ping -h"localhost" -u"root" -p"${MYSQL_ROOT_PASSWORD}" --silent; do
    if [ $attempt -eq $max_attempts ]; then
        echo "Failed to connect to MySQL after $max_attempts attempts"
        exit 1
    fi
    echo "Attempt $attempt of $max_attempts: MySQL not ready, waiting..."
    sleep 2
    ((attempt++))
done

# Initialize database
echo "[INFO] Running migrations..."
for migration in db-setup/migrations/V*.sql; do
    echo "Running migration: $migration"
    mysql -u root -p"${MYSQL_ROOT_PASSWORD}" < "$migration"
done

# Setup Python environment and run data scripts
echo "[INFO] Setting up Python environment..."
pip3 install --no-cache-dir -r db-setup/requirements.txt

echo "[INFO] Running data setup scripts..."
cd db-setup/scripts
python3 create_tables.py
python3 departments_data.py
python3 load_data.py
cd ../..

# If in Docker environment, handle additional services
if [ "$ENVIRONMENT" = "docker" ]; then
    echo "[INFO] Starting Docker services..."
    docker-compose up -d api load-generator
fi

echo "[INFO] Deployment completed successfully!"


###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\docker-compose.yml ######
version: '3.8'

services:
  mysql:
    build:
      context: ./db-setup
      dockerfile: Dockerfile
    container_name: mysql-db
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - mysql_logs:/var/log/mysql
    networks:
      - backend
    healthcheck:
      test: mysqladmin ping -h localhost -u $$MYSQL_USER --password=$$MYSQL_PASSWORD
      interval: 10s
      timeout: 5s
      retries: 3

  api:
    build:
      context: ./services/api
      dockerfile: Dockerfile
    container_name: employees-api
    environment:
      MYSQL_HOST: mysql-db
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      API_PORT: ${API_PORT}
    ports:
      - "${API_PORT}:3000"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - backend

  load-generator:
    build:
      context: ./services/load-generator
      dockerfile: Dockerfile
    environment:
      API_URL: http://api:3000
      K6_VUS: ${K6_VUS}
      K6_DURATION: ${K6_DURATION}
    depends_on:
      - api
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  mysql_data:
  mysql_logs:

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\verify_setup.sh ######
#!/bin/bash
set -e

echo "Verifying MySQL performance testing environment setup..."

# Check required files exist
required_files=(
    ".env"
    "docker-compose.yml"
    "db-setup/Dockerfile"
    "db-setup/migrations/01_init_schema.sql"
    "db-setup/migrations/02_init_users.sh"
    "db-setup/scripts/load_data.py"
    "services/api/server.js"
    "services/load-generator/scripts/load-test.js"
)

for file in "${required_files[@]}"; do
    if [ ! -f "$file" ]; then
        echo "Error: Required file $file not found!"
        exit 1
    fi
done

echo "File structure verified successfully."

# Verify Docker and dependencies
command -v docker >/dev/null 2>&1 || { echo "Docker is required but not installed."; exit 1; }
command -v docker-compose >/dev/null 2>&1 || { echo "Docker Compose is required but not installed."; exit 1; }

echo "Dependencies verified successfully."

echo "Setup verification complete. You can now run: docker-compose up -d"

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\config\mysql.cnf ######
# MySQL Configuration
[mysqld]
bind-address = 0.0.0.0
port = 3306
default-storage-engine = InnoDB
innodb_buffer_pool_size = 1G

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\config\performance-schema.cnf ######
# Performance Schema Configuration
[mysqld]
performance_schema = ON
performance_schema_instrument = 'statement/sql/*=ON'
performance_schema_consumer_events_statements_history = ON
performance_schema_consumer_events_statements_history_long = ON

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\combined_content.txt ######
###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\combined_content.txt ######

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\Dockerfile ######
FROM mysql:8.0

# Install required utilities
RUN microdnf update && \
    microdnf install -y curl python3 python3-pip && \
    microdnf clean all

# Create required directories
RUN mkdir -p /var/log/mysql /scripts /docker-entrypoint-initdb.d && \
    chown mysql:mysql /var/log/mysql && \
    chmod 755 /var/log/mysql

# Copy configuration files
COPY config/ /etc/mysql/conf.d/
RUN chown -R mysql:mysql /etc/mysql/conf.d/ && \
    chmod 0444 /etc/mysql/conf.d/*.cnf

# Copy initialization files
COPY migrations/ /docker-entrypoint-initdb.d/
RUN chmod -R 0755 /docker-entrypoint-initdb.d/

# Copy Python scripts and requirements
COPY scripts/ /scripts/
COPY requirements.txt /scripts/

# Install Python dependencies
RUN pip3 install --no-cache-dir -r /scripts/requirements.txt && \
    rm -rf /root/.cache/pip

# Create healthcheck script
RUN echo '#!/bin/bash' > /healthcheck.sh && \
    echo 'mysqladmin ping -h"localhost" -u"$MYSQL_USER" -p"$MYSQL_PASSWORD" --silent' >> /healthcheck.sh && \
    chmod +x /healthcheck.sh

EXPOSE 3306

HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD ["/healthcheck.sh"]

CMD ["mysqld"]

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\requirements.txt ######
mysql-connector-python==8.0.28

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\config\mysql.cnf ######
[mysqld]
# InnoDB Settings
innodb_buffer_pool_size = 1G
innodb_buffer_pool_instances = 2
innodb_file_per_table = 1
innodb_flush_log_at_trx_commit = 2
innodb_log_buffer_size = 16M
innodb_io_capacity = 1000
innodb_flush_method = O_DIRECT
innodb_thread_concurrency = 0

# Buffer Settings
sort_buffer_size = 1M
read_buffer_size = 1M
join_buffer_size = 1M
tmp_table_size = 32M
max_heap_table_size = 32M

# Connection Settings
max_connections = 100
thread_cache_size = 50
wait_timeout = 28800
interactive_timeout = 28800

# Slow Query Logging
slow_query_log = 1
slow_query_log_file = /var/log/mysql/slow.log
long_query_time = ${SLOW_QUERY_TIME}
log_queries_not_using_indexes = 1

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\config\performance-schema.cnf ######
[mysqld]
# Enable Performance Schema
performance_schema = ON
performance_schema_max_digest_length = 4096
performance_schema_max_sql_text_length = 4096

# Instrument Configuration
performance_schema_instrument = 'memory/%=ON'
performance_schema_instrument = 'statement/%=ON'
performance_schema_instrument = 'wait/lock/metadata/sql/mdl=ON'
performance_schema_instrument = 'wait/lock/table/sql/handler=ON'
performance_schema_instrument = 'table/%=ON'

# Consumer Configuration
performance_schema_consumer_events_statements_current = ON
performance_schema_consumer_events_statements_history = ON
performance_schema_consumer_events_statements_history_long = ON
performance_schema_consumer_statements_digest = ON

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\migrations\01_init_schema.sql ######
-- Initialize database and tables
CREATE DATABASE IF NOT EXISTS employees;
USE employees;

-- Create departments table
CREATE TABLE IF NOT EXISTS departments (
    dept_no CHAR(4) PRIMARY KEY,
    dept_name VARCHAR(40) NOT NULL,
    manager_budget DECIMAL(15,2),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY uk_dept_name (dept_name)
);

-- Create employees table
CREATE TABLE IF NOT EXISTS employees (
    emp_no INT PRIMARY KEY,
    birth_date DATE NOT NULL,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    gender ENUM('M','F') NOT NULL,
    hire_date DATE NOT NULL,
    birth_month INT GENERATED ALWAYS AS (MONTH(birth_date)) STORED,
    hire_year INT GENERATED ALWAYS AS (YEAR(hire_date)) STORED,
    salary_tier INT GENERATED ALWAYS AS (
        CASE 
            WHEN emp_no % 4 = 0 THEN 1
            WHEN emp_no % 4 = 1 THEN 2
            WHEN emp_no % 4 = 2 THEN 3
            ELSE 4
        END
    ) STORED,
    last_modified TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Create salaries table
CREATE TABLE IF NOT EXISTS salaries (
    id INT AUTO_INCREMENT PRIMARY KEY,
    emp_no INT NOT NULL,
    salary INT NOT NULL,
    from_date DATE NOT NULL,
    to_date DATE NOT NULL,
    FOREIGN KEY (emp_no) REFERENCES employees (emp_no) ON DELETE CASCADE
);

-- Create dept_emp table
CREATE TABLE IF NOT EXISTS dept_emp (
    emp_no INT NOT NULL,
    dept_no CHAR(4) NOT NULL,
    from_date DATE NOT NULL,
    to_date DATE NOT NULL,
    PRIMARY KEY (emp_no, dept_no),
    FOREIGN KEY (emp_no) REFERENCES employees (emp_no) ON DELETE CASCADE,
    FOREIGN KEY (dept_no) REFERENCES departments (dept_no) ON DELETE CASCADE
);

-- Create indexes
CREATE INDEX idx_employees_gender ON employees(gender);
CREATE INDEX idx_employees_birth_month ON employees(birth_month);
CREATE INDEX idx_employees_hire_year ON employees(hire_year);
CREATE INDEX idx_emp_name1 ON employees(last_name, first_name);
CREATE INDEX idx_salary_tier ON employees(salary_tier);

CREATE INDEX idx_salaries_amount ON salaries(salary);
CREATE INDEX idx_salaries_dates ON salaries(from_date, to_date);

CREATE INDEX idx_dept_emp_dates ON dept_emp(from_date, to_date);

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\migrations\02_init_users.sh ######
#!/bin/bash
set -e

# Wait for MySQL to be ready
max_attempts=30
counter=0

until mysqladmin ping -h"localhost" -u"root" -p"${MYSQL_ROOT_PASSWORD}" --silent; do
    counter=$((counter + 1))
    if [ $counter -eq $max_attempts ]; then
        echo "Failed to connect to MySQL after $max_attempts attempts"
        exit 1
    fi
    echo "Attempt $counter of $max_attempts: MySQL not ready, waiting..."
    sleep 2
done

mysql -uroot -p"${MYSQL_ROOT_PASSWORD}" <<EOSQL
-- Create users with basic permissions
CREATE USER IF NOT EXISTS '${MYSQL_USER}'@'%' IDENTIFIED BY '${MYSQL_PASSWORD}';
CREATE USER IF NOT EXISTS '${MYSQL_MONITOR_USER}'@'%' IDENTIFIED BY '${MYSQL_MONITOR_PASSWORD}';

-- Grant permissions to application user
GRANT ALL PRIVILEGES ON ${MYSQL_DATABASE}.* TO '${MYSQL_USER}'@'%';

-- Grant monitoring permissions
GRANT SELECT, PROCESS, REPLICATION CLIENT ON *.* TO '${MYSQL_MONITOR_USER}'@'%';
GRANT SELECT ON performance_schema.* TO '${MYSQL_MONITOR_USER}'@'%';
GRANT SELECT ON sys.* TO '${MYSQL_MONITOR_USER}'@'%';
GRANT SELECT ON information_schema.* TO '${MYSQL_MONITOR_USER}'@'%';

-- Enable performance monitoring
UPDATE performance_schema.setup_instruments 
SET ENABLED = 'YES', TIMED = 'YES'
WHERE NAME LIKE '%statement/%' 
   OR NAME LIKE '%stage/%'
   OR NAME LIKE '%wait/%'
   OR NAME LIKE '%memory/%';

UPDATE performance_schema.setup_consumers
SET ENABLED = 'YES'
WHERE NAME LIKE '%events%';

FLUSH PRIVILEGES;
EOSQL

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\scripts\create_tables.py ######
import mysql.connector
import os
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def create_tables():
    db_config = {
        'host': os.getenv('MYSQL_HOST', 'localhost'),
        'user': os.getenv('MYSQL_USER', 'root'),
        'password': os.getenv('MYSQL_ROOT_PASSWORD', 'demo123'),
        'database': os.getenv('MYSQL_DATABASE', 'employees')
    }
    
    try:
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()
        
        # Create departments table if not exists
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS departments (
                dept_no CHAR(4) PRIMARY KEY,
                dept_name VARCHAR(40) NOT NULL,
                manager_budget DECIMAL(15,2),
                UNIQUE KEY uk_dept_name (dept_name)
            )
        """)
        
        # Create employees table if not exists
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS employees (
                emp_no INT PRIMARY KEY,
                birth_date DATE NOT NULL,
                first_name VARCHAR(50) NOT NULL,
                last_name VARCHAR(50) NOT NULL,
                gender ENUM('M','F') NOT NULL,
                hire_date DATE NOT NULL,
                birth_month INT GENERATED ALWAYS AS (MONTH(birth_date)) STORED,
                hire_year INT GENERATED ALWAYS AS (YEAR(hire_date)) STORED,
                salary_tier INT GENERATED ALWAYS AS (
                    CASE 
                        WHEN emp_no % 4 = 0 THEN 1
                        WHEN emp_no % 4 = 1 THEN 2
                        WHEN emp_no % 4 = 2 THEN 3
                        ELSE 4
                    END
                ) STORED
            )
        """)
        
        conn.commit()
        logger.info("Tables created successfully")
        
    except Exception as e:
        logger.error(f"Error creating tables: {str(e)}")
        conn.rollback()
        raise
    finally:
        if 'conn' in locals():
            cursor.close()
            conn.close()

if __name__ == "__main__":
    create_tables()
###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\scripts\departments_data.py ######
#!/usr/bin/env python3
import mysql.connector
import os
import logging
from mysql.connector import Error

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

DEPARTMENTS = [
    ('d001', 'Marketing'),
    ('d002', 'Finance'),
    ('d003', 'Human Resources'),
    ('d004', 'Research and Development'),
    ('d005', 'Quality Assurance'),
    ('d006', 'Sales'),
    ('d007', 'IT'),
    ('d008', 'Operations'),
    ('d009', 'Customer Support'),
    ('d010', 'Product Management')
]

def get_db_config():
    return {
        'host': os.getenv('MYSQL_HOST', 'localhost'),
        'user': os.getenv('MYSQL_USER', 'myuser'),
        'password': os.getenv('MYSQL_PASSWORD', 'userpass123'),
        'database': os.getenv('MYSQL_DATABASE', 'employees')
    }

def main():
    try:
        conn = mysql.connector.connect(**get_db_config())
        cursor = conn.cursor()
        
        # Insert departments
        cursor.executemany("""
            INSERT INTO departments (dept_no, dept_name)
            VALUES (%s, %s)
            ON DUPLICATE KEY UPDATE dept_name = VALUES(dept_name)
        """, DEPARTMENTS)
        
        # Initialize manager_budget randomly
        cursor.execute("""
            UPDATE departments 
            SET manager_budget = FLOOR(1000000 + RAND() * 1000000)
            WHERE manager_budget IS NULL
        """)
        
        conn.commit()
        logger.info(f"Inserted {len(DEPARTMENTS)} departments successfully")
        
    except Error as e:
        logger.error(f"Error: {e}")
        if 'conn' in locals():
            conn.rollback()
        raise
    finally:
        if 'cursor' in locals():
            cursor.close()
        if 'conn' in locals():
            conn.close()

if __name__ == "__main__":
    main()

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\scripts\healthcheck.sh ######
#!/bin/bash
set -eo pipefail

MYSQL_USER=${MYSQL_HEALTHCHECK_USER:-$MYSQL_USER}
MYSQL_PASS=${MYSQL_HEALTHCHECK_PASSWORD:-$MYSQL_PASSWORD}

if ! mysqladmin ping -h"localhost" -u"$MYSQL_USER" -p"$MYSQL_PASS" --silent; then
    exit 1
fi

mysql -u"$MYSQL_USER" -p"$MYSQL_PASS" -e "SELECT 1;" >/dev/null 2>&1
exit $?

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\scripts\init-db.sh ######
#!/bin/bash
set -e

mysql -u root -p"$MYSQL_ROOT_PASSWORD" << EOSQL
-- Create users
CREATE USER IF NOT EXISTS '$MYSQL_USER'@'%' IDENTIFIED BY '$MYSQL_PASSWORD';
CREATE USER IF NOT EXISTS '$MYSQL_MONITOR_USER'@'%' IDENTIFIED BY '$MYSQL_MONITOR_PASSWORD';

-- Grant permissions
GRANT ALL PRIVILEGES ON $MYSQL_DATABASE.* TO '$MYSQL_USER'@'%';
GRANT SELECT, PROCESS, REPLICATION CLIENT ON *.* TO '$MYSQL_MONITOR_USER'@'%';
GRANT SELECT ON performance_schema.* TO '$MYSQL_MONITOR_USER'@'%';
GRANT SELECT ON sys.* TO '$MYSQL_MONITOR_USER'@'%';
GRANT SELECT ON information_schema.* TO '$MYSQL_MONITOR_USER'@'%';

-- Enable monitoring
UPDATE performance_schema.setup_instruments 
SET ENABLED = 'YES', TIMED = 'YES'
WHERE NAME LIKE '%statement/%' 
   OR NAME LIKE '%stage/%'
   OR NAME LIKE '%wait/%'
   OR NAME LIKE '%memory/%';

UPDATE performance_schema.setup_consumers
SET ENABLED = 'YES'
WHERE NAME LIKE '%events%';

FLUSH PRIVILEGES;
EOSQL

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\scripts\load_data.py ######
#!/usr/bin/env python3
import mysql.connector
import random
from datetime import date, timedelta
from faker import Faker
import os
import logging
import time
from mysql.connector import Error

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def get_db_config():
    return {
        'host': os.getenv('MYSQL_HOST', 'localhost'),
        'user': os.getenv('MYSQL_USER', 'myuser'),
        'password': os.getenv('MYSQL_PASSWORD', 'userpass123'),
        'database': os.getenv('MYSQL_DATABASE', 'employees'),
        'raise_on_warnings': True
    }

def generate_employee_batch(start_emp_no, batch_size, fake):
    employees = []
    salaries = []
    dept_assignments = []
    departments = ['d001', 'd002', 'd003', 'd004', 'd005', 
                  'd006', 'd007', 'd008', 'd009', 'd010']
    
    for i in range(batch_size):
        emp_no = start_emp_no + i
        birth_date = fake.date_between(start_date='-65y', end_date='-25y')
        hire_date = fake.date_between(start_date='-20y', end_date='today')
        
        employees.append((
            emp_no,
            birth_date,
            fake.first_name(),
            fake.last_name(),
            random.choice(['M', 'F']),
            hire_date
        ))
        
        # Generate salary history
        current_date = hire_date
        for _ in range(random.randint(2, 4)):
            salary = random.randint(30000, 150000)
            if random.random() < 0.05:  # 5% outliers
                salary = int(salary * random.uniform(1.5, 2.5))
            
            to_date = date(9999, 1, 1) if _ == 0 else \
                     current_date + timedelta(days=random.randint(365, 1095))
            
            salaries.append((emp_no, salary, current_date, to_date))
            current_date = to_date
        
        # Department assignments
        num_depts = random.randint(1, 2)
        selected_depts = random.sample(departments, num_depts)
        for dept_no in selected_depts:
            dept_assignments.append((
                emp_no,
                dept_no,
                hire_date,
                date(9999, 1, 1)
            ))
    
    return employees, salaries, dept_assignments

def main():
    batch_size = int(os.getenv('BATCH_SIZE', 1000))
    total_employees = int(os.getenv('TOTAL_EMPLOYEES', 10000))
    
    try:
        conn = mysql.connector.connect(**get_db_config())
        cursor = conn.cursor()
        
        fake = Faker()
        logger.info(f"Starting data load: {total_employees} employees")
        
        for batch_start in range(0, total_employees, batch_size):
            start_time = time.time()
            
            employees, salaries, dept_assignments = generate_employee_batch(
                batch_start + 1000000,  # Starting emp_no
                min(batch_size, total_employees - batch_start),
                fake
            )
            
            cursor.executemany("""
                INSERT INTO employees 
                (emp_no, birth_date, first_name, last_name, gender, hire_date)
                VALUES (%s, %s, %s, %s, %s, %s)
            """, employees)
            
            cursor.executemany("""
                INSERT INTO salaries 
                (emp_no, salary, from_date, to_date)
                VALUES (%s, %s, %s, %s)
            """, salaries)
            
            cursor.executemany("""
                INSERT INTO dept_emp 
                (emp_no, dept_no, from_date, to_date)
                VALUES (%s, %s, %s, %s)
            """, dept_assignments)
            
            conn.commit()
            
            elapsed = time.time() - start_time
            logger.info(
                f"Batch {batch_start//batch_size + 1} completed in {elapsed:.2f}s"
            )
            
    except Error as e:
        logger.error(f"Database error: {e}")
        if 'conn' in locals():
            conn.rollback()
        raise
    finally:
        if 'cursor' in locals():
            cursor.close()
        if 'conn' in locals():
            conn.close()

if __name__ == "__main__":
    main()

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\scripts\run_load_data.sh ######
#!/bin/bash
set -e

echo "Waiting for MySQL to be ready..."
while ! mysqladmin ping -h"localhost" --silent; do
    sleep 2
done

echo "Starting data load process..."
python3 /docker-entrypoint-initdb.d/load_data.py


###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\Dockerfile ######
FROM mysql:8.0

COPY my.cnf /etc/mysql/conf.d/
COPY init.sql /docker-entrypoint-initdb.d/

RUN chmod 0644 /etc/mysql/conf.d/my.cnf && \
    chown mysql:mysql /etc/mysql/conf.d/my.cnf

CMD ["mysqld"]

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\init.sql ######
CREATE DATABASE IF NOT EXISTS employees;
USE employees;

CREATE TABLE departments (
    dept_no CHAR(4) PRIMARY KEY,
    dept_name VARCHAR(40) NOT NULL,
    manager_budget DECIMAL(15,2),
    UNIQUE KEY uk_dept_name (dept_name)
);

CREATE TABLE employees (
    emp_no INT PRIMARY KEY,
    birth_date DATE NOT NULL,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    gender ENUM('M','F') NOT NULL,
    hire_date DATE NOT NULL
);

CREATE TABLE salaries (
    emp_no INT NOT NULL,
    salary INT NOT NULL,
    from_date DATE NOT NULL,
    to_date DATE NOT NULL,
    FOREIGN KEY (emp_no) REFERENCES employees (emp_no)
);

CREATE TABLE dept_emp (
    emp_no INT NOT NULL,
    dept_no CHAR(4) NOT NULL,
    from_date DATE NOT NULL,
    to_date DATE NOT NULL,
    PRIMARY KEY (emp_no, dept_no),
    FOREIGN KEY (emp_no) REFERENCES employees (emp_no),
    FOREIGN KEY (dept_no) REFERENCES departments (dept_no)
);

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\my.cnf ######
[mysqld]
default_authentication_plugin=mysql_native_password
explicit_defaults_for_timestamp=1

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\requirements.txt ######
mysql-connector-python==8.0.28

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\config\mysql.cnf ######
[mysqld]
# InnoDB Settings
innodb_buffer_pool_size = 1G
innodb_buffer_pool_instances = 2
innodb_file_per_table = 1
innodb_flush_log_at_trx_commit = 2
innodb_log_buffer_size = 16M
innodb_io_capacity = 1000
innodb_flush_method = O_DIRECT
innodb_thread_concurrency = 0

# Buffer Settings
sort_buffer_size = 1M
read_buffer_size = 1M
join_buffer_size = 1M
tmp_table_size = 32M
max_heap_table_size = 32M

# Connection Settings
max_connections = 100
thread_cache_size = 50
wait_timeout = 28800
interactive_timeout = 28800

# Slow Query Logging
slow_query_log = 1
slow_query_log_file = /var/log/mysql/slow.log
long_query_time = 1
log_queries_not_using_indexes = 1
###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\config\performance-schema.cnf ######
[mysqld]
# Enable Performance Schema
performance_schema = ON
performance_schema_max_digest_length = 4096
performance_schema_max_sql_text_length = 4096

# Instrument Configuration
performance_schema_instrument = 'memory/%=ON'
performance_schema_instrument = 'statement/%=ON'
performance_schema_instrument = 'wait/lock/metadata/sql/mdl=ON'
performance_schema_instrument = 'wait/lock/table/sql/handler=ON'
performance_schema_instrument = 'table/%=ON'

# Consumer Configuration
performance_schema_consumer_events_statements_current = ON
performance_schema_consumer_events_statements_history = ON
performance_schema_consumer_events_statements_history_long = ON
performance_schema_consumer_statements_digest = ON

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\migrations\01_init_schema.sql ######
-- Initialize database
CREATE DATABASE IF NOT EXISTS ${MYSQL_DATABASE};
USE ${MYSQL_DATABASE};

-- Create departments table
CREATE TABLE IF NOT EXISTS departments (
    dept_no CHAR(4) PRIMARY KEY,
    dept_name VARCHAR(40) NOT NULL,
    manager_budget DECIMAL(15,2),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY uk_dept_name (dept_name)
);

-- Create employees table
CREATE TABLE IF NOT EXISTS employees (
    emp_no INT PRIMARY KEY,
    birth_date DATE NOT NULL,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    gender ENUM('M','F') NOT NULL,
    hire_date DATE NOT NULL,
    birth_month INT GENERATED ALWAYS AS (MONTH(birth_date)) STORED,
    hire_year INT GENERATED ALWAYS AS (YEAR(hire_date)) STORED,
    salary_tier INT GENERATED ALWAYS AS (
        CASE 
            WHEN emp_no % 4 = 0 THEN 1
            WHEN emp_no % 4 = 1 THEN 2
            WHEN emp_no % 4 = 2 THEN 3
            ELSE 4
        END
    ) STORED,
    last_modified TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Create salaries table
CREATE TABLE IF NOT EXISTS salaries (
    id INT AUTO_INCREMENT PRIMARY KEY,
    emp_no INT NOT NULL,
    salary INT NOT NULL,
    from_date DATE NOT NULL,
    to_date DATE NOT NULL,
    FOREIGN KEY (emp_no) REFERENCES employees (emp_no) ON DELETE CASCADE
);

-- Create dept_emp table
CREATE TABLE IF NOT EXISTS dept_emp (
    emp_no INT NOT NULL,
    dept_no CHAR(4) NOT NULL,
    from_date DATE NOT NULL,
    to_date DATE NOT NULL,
    PRIMARY KEY (emp_no, dept_no),
    FOREIGN KEY (emp_no) REFERENCES employees (emp_no) ON DELETE CASCADE,
    FOREIGN KEY (dept_no) REFERENCES departments (dept_no) ON DELETE CASCADE
);

-- Create indexes
CREATE INDEX idx_employees_gender ON employees(gender);
CREATE INDEX idx_employees_birth_month ON employees(birth_month);
CREATE INDEX idx_employees_hire_year ON employees(hire_year);
CREATE INDEX idx_emp_name1 ON employees(last_name, first_name);
CREATE INDEX idx_salary_tier ON employees(salary_tier);
CREATE INDEX idx_salaries_amount ON salaries(salary);
CREATE INDEX idx_salaries_dates ON salaries(from_date, to_date);
CREATE INDEX idx_dept_emp_dates ON dept_emp(from_date, to_date);
###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\migrations\02_init_users.sh ######
#!/bin/bash
set -e

mysql -uroot -p"${MYSQL_ROOT_PASSWORD}" <<EOSQL
-- Create users with basic permissions
CREATE USER IF NOT EXISTS '${MYSQL_USER}'@'%' IDENTIFIED BY '${MYSQL_PASSWORD}';
CREATE USER IF NOT EXISTS '${MYSQL_MONITOR_USER}'@'%' IDENTIFIED BY '${MYSQL_MONITOR_PASSWORD}';

-- Grant permissions to application user
GRANT ALL PRIVILEGES ON ${MYSQL_DATABASE}.* TO '${MYSQL_USER}'@'%';

-- Grant monitoring permissions
GRANT SELECT, PROCESS, REPLICATION CLIENT ON *.* TO '${MYSQL_MONITOR_USER}'@'%';
GRANT SELECT ON performance_schema.* TO '${MYSQL_MONITOR_USER}'@'%';
GRANT SELECT ON sys.* TO '${MYSQL_MONITOR_USER}'@'%';
GRANT SELECT ON information_schema.* TO '${MYSQL_MONITOR_USER}'@'%';

-- Enable performance monitoring
UPDATE performance_schema.setup_instruments 
SET ENABLED = 'YES', TIMED = 'YES'
WHERE NAME LIKE '%statement/%' 
   OR NAME LIKE '%stage/%'
   OR NAME LIKE '%wait/%'
   OR NAME LIKE '%memory/%';

UPDATE performance_schema.setup_consumers
SET ENABLED = 'YES'
WHERE NAME LIKE '%events%';

FLUSH PRIVILEGES;
EOSQL
###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\migrations\03_init_monitoring.sql ######
-- Create database and users
CREATE DATABASE IF NOT EXISTS employees;
USE employees;

-- Create users and grant permissions using prepared statements
DELIMITER //
CREATE PROCEDURE setup_users()
BEGIN
    SET @create_user = CONCAT('CREATE USER IF NOT EXISTS ''', @app_user, '''@''%'' IDENTIFIED BY ''', @app_pass, '''');
    SET @grant_privs = CONCAT('GRANT ALL PRIVILEGES ON employees.* TO ''', @app_user, '''@''%''');
    
    PREPARE stmt FROM @create_user;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
    
    PREPARE stmt FROM @grant_privs;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
END //
DELIMITER ;

-- Call the procedure with parameters
SET @app_user = 'myuser';
SET @app_pass = 'userpass123';
CALL setup_users();

DROP PROCEDURE IF EXISTS setup_users;

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\migrations\V1__init_monitoring.sh ######
#!/bin/bash
set -e

mysql -uroot -p"${MYSQL_ROOT_PASSWORD}" <<EOF
-- Enable performance monitoring
UPDATE performance_schema.setup_instruments 
SET ENABLED = 'YES', TIMED = 'YES'
WHERE NAME LIKE '%statement/%' 
   OR NAME LIKE '%stage/%'
   OR NAME LIKE '%wait/%'
   OR NAME LIKE '%memory/%';

UPDATE performance_schema.setup_consumers
SET ENABLED = 'YES'
WHERE NAME LIKE '%events%';

-- Create and configure users
CREATE USER IF NOT EXISTS '$MYSQL_USER'@'%' IDENTIFIED BY '$MYSQL_PASSWORD';
CREATE USER IF NOT EXISTS '$MYSQL_MONITOR_USER'@'%' IDENTIFIED BY '$MYSQL_MONITOR_PASSWORD';

GRANT ALL PRIVILEGES ON $MYSQL_DATABASE.* TO '$MYSQL_USER'@'%';
GRANT SELECT, PROCESS, REPLICATION CLIENT ON *.* TO '$MYSQL_MONITOR_USER'@'%';
GRANT SELECT ON performance_schema.* TO '$MYSQL_MONITOR_USER'@'%';
GRANT SELECT ON sys.* TO '$MYSQL_MONITOR_USER'@'%';

FLUSH PRIVILEGES;
EOF

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\scripts\create_tables.py ######
import mysql.connector
import os
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def create_tables():
    db_config = {
        'host': os.getenv('MYSQL_HOST', 'localhost'),
        'user': os.getenv('MYSQL_USER', 'root'),
        'password': os.getenv('MYSQL_ROOT_PASSWORD', 'demo123'),
        'database': os.getenv('MYSQL_DATABASE', 'employees')
    }
    
    try:
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()
        
        # Create departments table if not exists
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS departments (
                dept_no CHAR(4) PRIMARY KEY,
                dept_name VARCHAR(40) NOT NULL,
                manager_budget DECIMAL(15,2),
                UNIQUE KEY uk_dept_name (dept_name)
            )
        """)
        
        # Create employees table if not exists
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS employees (
                emp_no INT PRIMARY KEY,
                birth_date DATE NOT NULL,
                first_name VARCHAR(50) NOT NULL,
                last_name VARCHAR(50) NOT NULL,
                gender ENUM('M','F') NOT NULL,
                hire_date DATE NOT NULL,
                birth_month INT GENERATED ALWAYS AS (MONTH(birth_date)) STORED,
                hire_year INT GENERATED ALWAYS AS (YEAR(hire_date)) STORED,
                salary_tier INT GENERATED ALWAYS AS (
                    CASE 
                        WHEN emp_no % 4 = 0 THEN 1
                        WHEN emp_no % 4 = 1 THEN 2
                        WHEN emp_no % 4 = 2 THEN 3
                        ELSE 4
                    END
                ) STORED
            )
        """)
        
        conn.commit()
        logger.info("Tables created successfully")
        
    except Exception as e:
        logger.error(f"Error creating tables: {str(e)}")
        conn.rollback()
        raise
    finally:
        if 'conn' in locals():
            cursor.close()
            conn.close()

if __name__ == "__main__":
    create_tables()
###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\scripts\departments_data.py ######
#!/usr/bin/env python3
import mysql.connector
import os
import logging
from mysql.connector import Error

logging.basicConfig(level=os.getenv('LOG_LEVEL', 'INFO'))
logger = logging.getLogger(__name__)

DEPARTMENTS = [
    ('d001', 'Marketing'),
    ('d002', 'Finance'),
    ('d003', 'Human Resources'),
    ('d004', 'Research and Development'),
    ('d005', 'Quality Assurance'),
    ('d006', 'Sales'),
    ('d007', 'IT'),
    ('d008', 'Operations'),
    ('d009', 'Customer Support'),
    ('d010', 'Product Management')
]

def get_db_config():
    return {
        'host': os.getenv('MYSQL_HOST', 'localhost'),
        'user': os.getenv('MYSQL_USER'),
        'password': os.getenv('MYSQL_PASSWORD'),
        'database': os.getenv('MYSQL_DATABASE'),
        'raise_on_warnings': True
    }

def main():
    try:
        conn = mysql.connector.connect(**get_db_config())
        cursor = conn.cursor()
        
        # Insert departments
        cursor.executemany(
            """INSERT INTO departments (dept_no, dept_name)
               VALUES (%s, %s)
               ON DUPLICATE KEY UPDATE dept_name = VALUES(dept_name)""",
            DEPARTMENTS
        )
        
        # Initialize manager_budget with realistic values
        cursor.execute("""
            UPDATE departments 
            SET manager_budget = 
                CASE 
                    WHEN dept_name IN ('IT', 'Sales', 'Research and Development')
                    THEN FLOOR(1500000 + RAND() * 500000)
                    ELSE FLOOR(800000 + RAND() * 400000)
                END
            WHERE manager_budget IS NULL
        """)
        
        conn.commit()
        logger.info(f"Inserted {len(DEPARTMENTS)} departments successfully")
        
    except Error as e:
        logger.error(f"Error: {e}")
        if 'conn' in locals():
            conn.rollback()
        raise
    finally:
        if 'cursor' in locals():
            cursor.close()
        if 'conn' in locals():
            conn.close()

if __name__ == "__main__":
    main()
###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\scripts\healthcheck.sh ######
#!/bin/bash
set -eo pipefail

if ! mysqladmin ping -h"localhost" -u"${MYSQL_USER}" -p"${MYSQL_PASSWORD}" --silent; then
    exit 1
fi

mysql -u"${MYSQL_USER}" -p"${MYSQL_PASSWORD}" -e "SELECT 1;" >/dev/null 2>&1
exit $?
###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\scripts\init-db.sh ######
#!/bin/bash
set -e

mysql -u root -p"$MYSQL_ROOT_PASSWORD" << EOSQL
-- Create users
CREATE USER IF NOT EXISTS '$MYSQL_USER'@'%' IDENTIFIED BY '$MYSQL_PASSWORD';
CREATE USER IF NOT EXISTS '$MYSQL_MONITOR_USER'@'%' IDENTIFIED BY '$MYSQL_MONITOR_PASSWORD';

-- Grant permissions
GRANT ALL PRIVILEGES ON $MYSQL_DATABASE.* TO '$MYSQL_USER'@'%';
GRANT SELECT, PROCESS, REPLICATION CLIENT ON *.* TO '$MYSQL_MONITOR_USER'@'%';
GRANT SELECT ON performance_schema.* TO '$MYSQL_MONITOR_USER'@'%';
GRANT SELECT ON sys.* TO '$MYSQL_MONITOR_USER'@'%';
GRANT SELECT ON information_schema.* TO '$MYSQL_MONITOR_USER'@'%';

-- Enable monitoring
UPDATE performance_schema.setup_instruments 
SET ENABLED = 'YES', TIMED = 'YES'
WHERE NAME LIKE '%statement/%' 
   OR NAME LIKE '%stage/%'
   OR NAME LIKE '%wait/%'
   OR NAME LIKE '%memory/%';

UPDATE performance_schema.setup_consumers
SET ENABLED = 'YES'
WHERE NAME LIKE '%events%';

FLUSH PRIVILEGES;
EOSQL

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\scripts\load_data.py ######
#!/usr/bin/env python3
import mysql.connector
import random
from datetime import date, timedelta
from faker import Faker
import os
import logging
import time
from mysql.connector import Error

logging.basicConfig(
    level=os.getenv('LOG_LEVEL', 'INFO'),
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def get_db_config():
    return {
        'host': os.getenv('MYSQL_HOST', 'localhost'),
        'user': os.getenv('MYSQL_USER'),
        'password': os.getenv('MYSQL_PASSWORD'),
        'database': os.getenv('MYSQL_DATABASE'),
        'raise_on_warnings': True,
        'connect_timeout': 30
    }

def generate_employee_batch(start_emp_no, batch_size, fake):
    employees = []
    salaries = []
    dept_assignments = []
    departments = ['d001', 'd002', 'd003', 'd004', 'd005', 
                  'd006', 'd007', 'd008', 'd009', 'd010']
    
    for i in range(batch_size):
        emp_no = start_emp_no + i
        birth_date = fake.date_between(start_date='-65y', end_date='-25y')
        hire_date = fake.date_between(start_date='-20y', end_date='today')
        
        employees.append((
            emp_no,
            birth_date,
            fake.first_name(),
            fake.last_name(),
            random.choice(['M', 'F']),
            hire_date
        ))
        
        # Generate salary history with realistic progression
        current_date = hire_date
        base_salary = random.randint(30000, 70000)
        for year in range(random.randint(2, 4)):
            salary = base_salary * (1 + year * 0.05)  # 5% raise each year
            if random.random() < 0.05:  # 5% outliers
                salary *= random.uniform(1.5, 2.0)
            
            to_date = date(9999, 1, 1) if year == 0 else \
                     current_date + timedelta(days=365)
            
            salaries.append((emp_no, int(salary), current_date, to_date))
            current_date = to_date
        
        # Department assignments with realistic distribution
        num_depts = random.choices([1, 2], weights=[0.8, 0.2])[0]  # 80% in one dept, 20% in two
        selected_depts = random.sample(departments, num_depts)
        for dept_no in selected_depts:
            dept_assignments.append((
                emp_no,
                dept_no,
                hire_date,
                date(9999, 1, 1)
            ))
    
    return employees, salaries, dept_assignments

def main():
    batch_size = int(os.getenv('BATCH_SIZE', 1000))
    total_employees = int(os.getenv('TOTAL_EMPLOYEES', 10000))
    
    try:
        conn = mysql.connector.connect(**get_db_config())
        cursor = conn.cursor()
        
        fake = Faker()
        logger.info(f"Starting data load: {total_employees} employees")
        
        for batch_start in range(0, total_employees, batch_size):
            start_time = time.time()
            
            try:
                employees, salaries, dept_assignments = generate_employee_batch(
                    batch_start + 1000000,  # Starting emp_no
                    min(batch_size, total_employees - batch_start),
                    fake
                )
                
                cursor.executemany(
                    """INSERT INTO employees 
                       (emp_no, birth_date, first_name, last_name, gender, hire_date)
                       VALUES (%s, %s, %s, %s, %s, %s)""",
                    employees
                )
                
                cursor.executemany(
                    """INSERT INTO salaries 
                       (emp_no, salary, from_date, to_date)
                       VALUES (%s, %s, %s, %s)""",
                    salaries
                )
                
                cursor.executemany(
                    """INSERT INTO dept_emp 
                       (emp_no, dept_no, from_date, to_date)
                       VALUES (%s, %s, %s, %s)""",
                    dept_assignments
                )
                
                conn.commit()
                
                elapsed = time.time() - start_time
                logger.info(
                    f"Batch {batch_start//batch_size + 1} completed: "
                    f"{len(employees)} employees loaded in {elapsed:.2f}s"
                )
                
            except Error as e:
                logger.error(f"Error in batch starting at {batch_start}: {e}")
                conn.rollback()
                continue
            
    except Error as e:
        logger.error(f"Database error: {e}")
        raise
    finally:
        if 'cursor' in locals():
            cursor.close()
        if 'conn' in locals():
            conn.close()

if __name__ == "__main__":
    main()
###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\scripts\run_load_data.sh ######
#!/bin/bash
set -e

echo "Waiting for MySQL to be ready..."
while ! mysqladmin ping -h"localhost" --silent; do
    sleep 2
done

echo "Starting data load process..."
python3 /docker-entrypoint-initdb.d/load_data.py

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\deploy\azure\deploy.sh ######
#!/bin/bash
set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "${SCRIPT_DIR}/../common/validate.sh"

# Validate environment
validate_environment "azure"

# Load environment variables
source "${SCRIPT_DIR}/../../config/azure.env"

echo "Starting Azure VM native deployment..."

# Install MySQL if not present
if ! command -v mysql &> /dev/null; then
    echo "Installing MySQL..."
    sudo microdnf update
    sudo microdnf install -y mysql-server
fi

# Configure MySQL
echo "Configuring MySQL..."
sudo cp "${SCRIPT_DIR}/../../config/mysql/azure.cnf" /etc/mysql/conf.d/performance.cnf
sudo systemctl restart mysql

# Initialize database
echo "Initializing database..."
mysql -u root -p"${MYSQL_ROOT_PASSWORD}" < "${SCRIPT_DIR}/../../db-setup/migrations/V1__init_monitoring.sql"
mysql -u root -p"${MYSQL_ROOT_PASSWORD}" < "${SCRIPT_DIR}/../../db-setup/migrations/V2__create_base_schema.sql"
mysql -u root -p"${MYSQL_ROOT_PASSWORD}" < "${SCRIPT_DIR}/../../db-setup/migrations/V3__add_indexes.sql"
mysql -u root -p"${MYSQL_ROOT_PASSWORD}" < "${SCRIPT_DIR}/../../db-setup/migrations/V4__create_views.sql"

# Initialize data
echo "Initializing data..."
source "${SCRIPT_DIR}/../common/init-data.sh"

# Setup monitoring
echo "Setting up monitoring..."
source "${SCRIPT_DIR}/setup-monitoring.sh"

echo "Deployment complete!"

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\deploy\common\init-data.sh ######
#!/bin/bash

# Sample script to initialize data
# Add your data initialization commands here

echo "Initializing sample data..."
# Example command to insert data
# mysql -u root -p"${MYSQL_ROOT_PASSWORD}" -e "INSERT INTO employees (name) VALUES ('John Doe');"

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\deploy\common\validate.sh ######
#!/bin/bash

validate_environment() {
    local deploy_type=$1
    
    # Check for required tools
    case $deploy_type in
        "docker")
            command -v docker >/dev/null 2>&1 || { echo "Docker is required but not installed."; exit 1; }
            command -v docker-compose >/dev/null 2>&1 || { echo "Docker Compose is required but not installed."; exit 1; }
            ;; 
        "azure")
            command -v mysql >/dev/null 2>&1 || { echo "MySQL client is required but not installed."; exit 1; }
            ;;
    esac
    
    # Check for required files
    local required_files=(
        "../../config/mysql/${deploy_type}.cnf"
        "../../config/${deploy_type}.env"
        "../../db-setup/migrations/V1__init_monitoring.sql"
    )
    
    for file in "${required_files[@]}"; do
        if [[ ! -f "${SCRIPT_DIR}/${file}" ]]; then
            echo "Required file not found: ${file}"
            exit 1
        fi
    done
}

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\deploy\docker\deploy.sh ######
#!/bin/bash
set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "${SCRIPT_DIR}/../common/validate.sh"

# Validate environment
validate_environment "docker"

# Load environment variables
source "${SCRIPT_DIR}/../../config/docker.env"

echo "Starting Docker deployment..."

# Ensure Docker is running
if ! docker info > /dev/null 2>&1; then
    echo "Docker is not running. Starting Docker..."
    sudo systemctl start docker
fi

# Pull required images
echo "Pulling required Docker images..."
docker-compose pull

# Start services
echo "Starting services..."
docker-compose up -d mysql

# Wait for MySQL to be ready
echo "Waiting for MySQL to be ready..."
until docker-compose exec -T mysql mysqladmin ping -h"localhost" -u"$MYSQL_USER" -p"$MYSQL_PASSWORD" --silent; do
    echo "MySQL is unavailable - sleeping"
    sleep 5
done

# Initialize data
echo "Initializing data..."
source "${SCRIPT_DIR}/../common/init-data.sh"

# Start remaining services
echo "Starting API and load generator..."
docker-compose up -d api load-generator

echo "Deployment complete!"

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\infrastructure\newrelic\custom-monitors.yml ######
custom_monitors:
  slow_queries:
    threshold: 1
    period: 60
    metric_name: SlowQueryCount
    query: |
      SELECT COUNT(*) as count
      FROM performance_schema.events_statements_history
      WHERE TIMER_WAIT > 1000000000000

  lock_contentions:
    threshold: 5
    period: 60
    metric_name: LockContentionCount
    query: |
      SELECT COUNT(*) as count
      FROM performance_schema.events_waits_current
      WHERE EVENT_NAME LIKE 'wait/lock%'

  memory_pressure:
    threshold: 90
    period: 60
    metric_name: MemoryPressure
    query: |
      SELECT SUBSTRING_INDEX(event_name,'/',2) as event_type,
             SUM(current_alloc) as current_bytes
      FROM performance_schema.memory_summary_global_by_event_name
      GROUP BY SUBSTRING_INDEX(event_name,'/',2)

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\infrastructure\newrelic\Dockerfile ######
# infrastructure/newrelic/Dockerfile

# Build stage for nri-mysql using a specific commit and modifying code
FROM golang:1.23-alpine AS builder

# Install git and build essentials
RUN apk add --no-cache git make

# Hardcode the integration ref
ARG MYSQL_INTEGRATION_REF=703b1f6

WORKDIR /go/src/github.com/newrelic/nri-mysql

# Clone the repository at the specified commit
RUN git clone https://github.com/spathlavath/nri-mysql.git . && \
    git checkout ${MYSQL_INTEGRATION_REF}

# Use sed to remove the conditional block and always call PopulateQueryPerformanceMetrics
RUN sed -i '/if args.EnableQueryPerformanceMonitoring {/,/}/c\query_performance_details.PopulateQueryPerformanceMetrics(args, e, i)' src/mysql.go

# Compile the modified binary
RUN make compile

# Final stage
FROM newrelic/infrastructure-bundle:latest

# Backup original binary if it exists
RUN if [ -f /var/db/newrelic-infra/newrelic-integrations/bin/nri-mysql ]; then \
    mv /var/db/newrelic-infra/newrelic-integrations/bin/nri-mysql /var/db/newrelic-infra/newrelic-integrations/bin/nri-mysql.bak; \
    fi

# Copy the compiled binary from builder
COPY --from=builder /go/src/github.com/newrelic/nri-mysql/bin/nri-mysql /var/db/newrelic-infra/newrelic-integrations/bin/

# Set correct permissions
RUN chmod 755 /var/db/newrelic-infra/newrelic-integrations/bin/nri-mysql

# Verify binary works
RUN /var/db/newrelic-infra/newrelic-integrations/bin/nri-mysql -show_version

ENTRYPOINT ["/usr/bin/newrelic-infra"]

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\infrastructure\newrelic\newrelic-infra.yml ######
license_key: ${NEW_RELIC_LICENSE_KEY}
display_name: MySQL-Performance-Demo
custom_attributes:
  environment: performance_testing
  service: mysql_performance

enable_process_metrics: true
strip_command_line: false

log:
  level: info
  file: /var/log/newrelic-infra/newrelic-infra.log

# Integration configurations
integrations_config:
  protocol_version: 4
  interval: 15s

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\infrastructure\newrelic\integrations.d\mysql-config.yml ######
integrations:
  - name: nri-mysql
    interval: 15s
    command: all_data
    env:
      HOSTNAME: ${MYSQL_HOST}
      PORT: ${MYSQL_PORT}
      USERNAME: ${MYSQL_MONITOR_USER}
      PASSWORD: ${MYSQL_MONITOR_PASSWORD}
      REMOTE_MONITORING: true
      EXTENDED_METRICS: true
      EXTENDED_INNODB_METRICS: true
      EXTENDED_PERFORMANCE_METRICS: true
      TABLES_METRICS: true
    labels:
      environment: performance_testing
      role: primary
    inventory_source: config/mysql
    config:
      # Collect specific query metrics
      slow_query_metrics: true
      query_response_time_stats: true
      
      # InnoDB metrics collection
      innodb_metrics:
        buffer_pool_metrics: true
        lock_metrics: true
        page_metrics: true
        
      # Table metrics collection
      table_metrics:
        size_metrics: true
        index_metrics: true
        
      # Specific table monitoring
      tables:
        - employees
        - departments
        - dept_emp
        - salaries

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\monitoring\newrelic\config.yml ######
integrations:
  - name: nri-mysql
    interval: 15s
    command: all_data
    env:
      HOSTNAME: ${MYSQL_HOST}
      PORT: ${MYSQL_PORT}
      USERNAME: ${MYSQL_MONITOR_USER}
      PASSWORD: ${MYSQL_MONITOR_PASSWORD}
      REMOTE_MONITORING: true
      EXTENDED_METRICS: true
      EXTENDED_INNODB_METRICS: true
      EXTENDED_PERFORMANCE_METRICS: true
      TABLES_METRICS: true
    
    config:
      slow_query_metrics: true
      query_response_time_stats: true
      
      innodb_metrics:
        buffer_pool_metrics: true
        lock_metrics: true
        page_metrics: true
        
      table_metrics:
        size_metrics: true
        index_metrics: true
        
      tables:
        - employees
        - departments
        - dept_emp
        - salaries

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\scripts\deploy-local.sh ######
#!/bin/bash
set -e
echo "[INFO] Deploying local environment..."
docker-compose down --remove-orphans
docker-compose up -d --build
echo "[INFO] Environment deployed!"
docker-compose ps

# Call verify_environment.sh
bash verify_environment.sh

# Call verify_environment.sh
bash verify_environment.sh

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\services\api\Dockerfile ######
FROM node:20-alpine

WORKDIR /app
COPY package*.json ./
RUN npm install --omit=dev
COPY . .

EXPOSE 3000
CMD ["node", "server.js"]

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\services\api\newrelic.cjs ######
'use strict';

exports.config = {
  app_name: [process.env.NEW_RELIC_APP_NAME],
  license_key: process.env.NEW_RELIC_LICENSE_KEY,
  logging: {
    level: 'info',
    enabled: true
  },
  allow_all_headers: true,
  attributes: {
    exclude: [
      'request.headers.cookie',
      'request.headers.authorization',
      'request.headers.proxyAuthorization',
      'request.headers.setCookie*',
      'request.headers.x*',
      'response.headers.cookie',
      'response.headers.authorization',
      'response.headers.proxyAuthorization',
      'response.headers.setCookie*',
      'response.headers.x*'
    ]
  },
  slow_sql: {
    enabled: true
  }
};

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\services\api\package.json ######
{
  "name": "api-service",
  "version": "1.0.0",
  "type": "module",
  "dependencies": {
    "express": "^4.17.1",
    "express-async-handler": "^1.1.4",
    "mysql2": "^2.3.3"
  },
  "scripts": {
    "start": "node server.js"
  }
}

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\services\api\server.js ######
import express from 'express';
import { createPool } from 'mysql2/promise';
import asyncHandler from 'express-async-handler';

const app = express();

const pool = createPool({
    host: process.env.MYSQL_HOST,
    user: process.env.MYSQL_USER,
    password: process.env.MYSQL_PASSWORD,
    database: process.env.MYSQL_DATABASE,
    waitForConnections: true,
    connectionLimit: 10
});

app.get('/health', asyncHandler(async (req, res) => {
    await pool.query('SELECT 1');
    res.json({ status: 'healthy' });
}));

app.use((err, req, res, next) => {
    console.error(err);
    res.status(500).json({ error: 'Internal Server Error' });
});

const port = process.env.API_PORT || 3000;
app.listen(port, () => {
    console.log(`Server running on port ${port}`);
});
###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\services\api\database\schema.sql ######
-- Create employees table
CREATE TABLE employees (
    emp_no INT PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    gender ENUM('M', 'F') NOT NULL,
    birth_date DATE NOT NULL,
    hire_date DATE NOT NULL,
    salary_tier INT NOT NULL
);

-- Create departments table
CREATE TABLE departments (
    dept_no CHAR(4) PRIMARY KEY,
    dept_name VARCHAR(255) NOT NULL
);

-- Create dept_emp table
CREATE TABLE dept_emp (
    emp_no INT NOT NULL,
    dept_no CHAR(4) NOT NULL,
    from_date DATE NOT NULL,
    to_date DATE NOT NULL,
    PRIMARY KEY (emp_no, dept_no),
    FOREIGN KEY (emp_no) REFERENCES employees(emp_no),
    FOREIGN KEY (dept_no) REFERENCES departments(dept_no)
);

-- Create salaries table
CREATE TABLE salaries (
    emp_no INT NOT NULL,
    salary DECIMAL(10, 2) NOT NULL,
    from_date DATE NOT NULL,
    to_date DATE NOT NULL,
    PRIMARY KEY (emp_no, from_date),
    FOREIGN KEY (emp_no) REFERENCES employees(emp_no)
);

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\services\load-generator\Dockerfile ######
FROM grafana/k6:latest
COPY scripts/ /scripts/
WORKDIR /scripts
CMD ["run", "load-test.js"]

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\services\load-generator\scripts\load-test.js ######
import http from 'k6/http';
import { check, sleep } from 'k6';

export const options = {
    vus: 10,
    duration: '30s'
};

export default function() {
    const response = http.get('http://api:3000/health');
    check(response, {
        'status is 200': (r) => r.status === 200
    });
    sleep(1);
}
