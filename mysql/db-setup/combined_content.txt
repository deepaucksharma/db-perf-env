###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\combined_content.txt ######

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\Dockerfile ######
FROM mysql:8.0

# Install required utilities
RUN microdnf update && \
    microdnf install -y curl python3 python3-pip && \
    microdnf clean all

# Create required directories
RUN mkdir -p /var/log/mysql /scripts /docker-entrypoint-initdb.d && \
    chown mysql:mysql /var/log/mysql && \
    chmod 755 /var/log/mysql

# Copy configuration files
COPY config/ /etc/mysql/conf.d/
RUN chown -R mysql:mysql /etc/mysql/conf.d/ && \
    chmod 0444 /etc/mysql/conf.d/*.cnf

# Copy initialization files
COPY migrations/ /docker-entrypoint-initdb.d/
RUN chmod -R 0755 /docker-entrypoint-initdb.d/

# Copy Python scripts and requirements
COPY scripts/ /scripts/
COPY requirements.txt /scripts/

# Install Python dependencies
RUN pip3 install --no-cache-dir -r /scripts/requirements.txt && \
    rm -rf /root/.cache/pip

# Create healthcheck script
RUN echo '#!/bin/bash' > /healthcheck.sh && \
    echo 'mysqladmin ping -h"localhost" -u"$MYSQL_USER" -p"$MYSQL_PASSWORD" --silent' >> /healthcheck.sh && \
    chmod +x /healthcheck.sh

EXPOSE 3306

HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD ["/healthcheck.sh"]

CMD ["mysqld"]

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\requirements.txt ######
mysql-connector-python==8.0.28

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\config\mysql.cnf ######
[mysqld]
# InnoDB Settings
innodb_buffer_pool_size = 1G
innodb_buffer_pool_instances = 2
innodb_file_per_table = 1
innodb_flush_log_at_trx_commit = 2
innodb_log_buffer_size = 16M
innodb_io_capacity = 1000
innodb_flush_method = O_DIRECT
innodb_thread_concurrency = 0

# Buffer Settings
sort_buffer_size = 1M
read_buffer_size = 1M
join_buffer_size = 1M
tmp_table_size = 32M
max_heap_table_size = 32M

# Connection Settings
max_connections = 100
thread_cache_size = 50
wait_timeout = 28800
interactive_timeout = 28800

# Slow Query Logging
slow_query_log = 1
slow_query_log_file = /var/log/mysql/slow.log
long_query_time = ${SLOW_QUERY_TIME}
log_queries_not_using_indexes = 1

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\config\performance-schema.cnf ######
[mysqld]
# Enable Performance Schema
performance_schema = ON
performance_schema_max_digest_length = 4096
performance_schema_max_sql_text_length = 4096

# Instrument Configuration
performance_schema_instrument = 'memory/%=ON'
performance_schema_instrument = 'statement/%=ON'
performance_schema_instrument = 'wait/lock/metadata/sql/mdl=ON'
performance_schema_instrument = 'wait/lock/table/sql/handler=ON'
performance_schema_instrument = 'table/%=ON'

# Consumer Configuration
performance_schema_consumer_events_statements_current = ON
performance_schema_consumer_events_statements_history = ON
performance_schema_consumer_events_statements_history_long = ON
performance_schema_consumer_statements_digest = ON

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\migrations\01_init_schema.sql ######
-- Initialize database and tables
CREATE DATABASE IF NOT EXISTS employees;
USE employees;

-- Create departments table
CREATE TABLE IF NOT EXISTS departments (
    dept_no CHAR(4) PRIMARY KEY,
    dept_name VARCHAR(40) NOT NULL,
    manager_budget DECIMAL(15,2),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY uk_dept_name (dept_name)
);

-- Create employees table
CREATE TABLE IF NOT EXISTS employees (
    emp_no INT PRIMARY KEY,
    birth_date DATE NOT NULL,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    gender ENUM('M','F') NOT NULL,
    hire_date DATE NOT NULL,
    birth_month INT GENERATED ALWAYS AS (MONTH(birth_date)) STORED,
    hire_year INT GENERATED ALWAYS AS (YEAR(hire_date)) STORED,
    salary_tier INT GENERATED ALWAYS AS (
        CASE 
            WHEN emp_no % 4 = 0 THEN 1
            WHEN emp_no % 4 = 1 THEN 2
            WHEN emp_no % 4 = 2 THEN 3
            ELSE 4
        END
    ) STORED,
    last_modified TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Create salaries table
CREATE TABLE IF NOT EXISTS salaries (
    id INT AUTO_INCREMENT PRIMARY KEY,
    emp_no INT NOT NULL,
    salary INT NOT NULL,
    from_date DATE NOT NULL,
    to_date DATE NOT NULL,
    FOREIGN KEY (emp_no) REFERENCES employees (emp_no) ON DELETE CASCADE
);

-- Create dept_emp table
CREATE TABLE IF NOT EXISTS dept_emp (
    emp_no INT NOT NULL,
    dept_no CHAR(4) NOT NULL,
    from_date DATE NOT NULL,
    to_date DATE NOT NULL,
    PRIMARY KEY (emp_no, dept_no),
    FOREIGN KEY (emp_no) REFERENCES employees (emp_no) ON DELETE CASCADE,
    FOREIGN KEY (dept_no) REFERENCES departments (dept_no) ON DELETE CASCADE
);

-- Create indexes
CREATE INDEX idx_employees_gender ON employees(gender);
CREATE INDEX idx_employees_birth_month ON employees(birth_month);
CREATE INDEX idx_employees_hire_year ON employees(hire_year);
CREATE INDEX idx_emp_name1 ON employees(last_name, first_name);
CREATE INDEX idx_salary_tier ON employees(salary_tier);

CREATE INDEX idx_salaries_amount ON salaries(salary);
CREATE INDEX idx_salaries_dates ON salaries(from_date, to_date);

CREATE INDEX idx_dept_emp_dates ON dept_emp(from_date, to_date);

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\migrations\02_init_users.sh ######
#!/bin/bash
set -e

# Wait for MySQL to be ready
max_attempts=30
counter=0

until mysqladmin ping -h"localhost" -u"root" -p"${MYSQL_ROOT_PASSWORD}" --silent; do
    counter=$((counter + 1))
    if [ $counter -eq $max_attempts ]; then
        echo "Failed to connect to MySQL after $max_attempts attempts"
        exit 1
    fi
    echo "Attempt $counter of $max_attempts: MySQL not ready, waiting..."
    sleep 2
done

mysql -uroot -p"${MYSQL_ROOT_PASSWORD}" <<EOSQL
-- Create users with basic permissions
CREATE USER IF NOT EXISTS '${MYSQL_USER}'@'%' IDENTIFIED BY '${MYSQL_PASSWORD}';
CREATE USER IF NOT EXISTS '${MYSQL_MONITOR_USER}'@'%' IDENTIFIED BY '${MYSQL_MONITOR_PASSWORD}';

-- Grant permissions to application user
GRANT ALL PRIVILEGES ON ${MYSQL_DATABASE}.* TO '${MYSQL_USER}'@'%';

-- Grant monitoring permissions
GRANT SELECT, PROCESS, REPLICATION CLIENT ON *.* TO '${MYSQL_MONITOR_USER}'@'%';
GRANT SELECT ON performance_schema.* TO '${MYSQL_MONITOR_USER}'@'%';
GRANT SELECT ON sys.* TO '${MYSQL_MONITOR_USER}'@'%';
GRANT SELECT ON information_schema.* TO '${MYSQL_MONITOR_USER}'@'%';

-- Enable performance monitoring
UPDATE performance_schema.setup_instruments 
SET ENABLED = 'YES', TIMED = 'YES'
WHERE NAME LIKE '%statement/%' 
   OR NAME LIKE '%stage/%'
   OR NAME LIKE '%wait/%'
   OR NAME LIKE '%memory/%';

UPDATE performance_schema.setup_consumers
SET ENABLED = 'YES'
WHERE NAME LIKE '%events%';

FLUSH PRIVILEGES;
EOSQL

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\scripts\create_tables.py ######
import mysql.connector
import os
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def create_tables():
    db_config = {
        'host': os.getenv('MYSQL_HOST', 'localhost'),
        'user': os.getenv('MYSQL_USER', 'root'),
        'password': os.getenv('MYSQL_ROOT_PASSWORD', 'demo123'),
        'database': os.getenv('MYSQL_DATABASE', 'employees')
    }
    
    try:
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()
        
        # Create departments table if not exists
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS departments (
                dept_no CHAR(4) PRIMARY KEY,
                dept_name VARCHAR(40) NOT NULL,
                manager_budget DECIMAL(15,2),
                UNIQUE KEY uk_dept_name (dept_name)
            )
        """)
        
        # Create employees table if not exists
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS employees (
                emp_no INT PRIMARY KEY,
                birth_date DATE NOT NULL,
                first_name VARCHAR(50) NOT NULL,
                last_name VARCHAR(50) NOT NULL,
                gender ENUM('M','F') NOT NULL,
                hire_date DATE NOT NULL,
                birth_month INT GENERATED ALWAYS AS (MONTH(birth_date)) STORED,
                hire_year INT GENERATED ALWAYS AS (YEAR(hire_date)) STORED,
                salary_tier INT GENERATED ALWAYS AS (
                    CASE 
                        WHEN emp_no % 4 = 0 THEN 1
                        WHEN emp_no % 4 = 1 THEN 2
                        WHEN emp_no % 4 = 2 THEN 3
                        ELSE 4
                    END
                ) STORED
            )
        """)
        
        conn.commit()
        logger.info("Tables created successfully")
        
    except Exception as e:
        logger.error(f"Error creating tables: {str(e)}")
        conn.rollback()
        raise
    finally:
        if 'conn' in locals():
            cursor.close()
            conn.close()

if __name__ == "__main__":
    create_tables()
###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\scripts\departments_data.py ######
#!/usr/bin/env python3
import mysql.connector
import os
import logging
from mysql.connector import Error

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

DEPARTMENTS = [
    ('d001', 'Marketing'),
    ('d002', 'Finance'),
    ('d003', 'Human Resources'),
    ('d004', 'Research and Development'),
    ('d005', 'Quality Assurance'),
    ('d006', 'Sales'),
    ('d007', 'IT'),
    ('d008', 'Operations'),
    ('d009', 'Customer Support'),
    ('d010', 'Product Management')
]

def get_db_config():
    return {
        'host': os.getenv('MYSQL_HOST', 'localhost'),
        'user': os.getenv('MYSQL_USER', 'myuser'),
        'password': os.getenv('MYSQL_PASSWORD', 'userpass123'),
        'database': os.getenv('MYSQL_DATABASE', 'employees')
    }

def main():
    try:
        conn = mysql.connector.connect(**get_db_config())
        cursor = conn.cursor()
        
        # Insert departments
        cursor.executemany("""
            INSERT INTO departments (dept_no, dept_name)
            VALUES (%s, %s)
            ON DUPLICATE KEY UPDATE dept_name = VALUES(dept_name)
        """, DEPARTMENTS)
        
        # Initialize manager_budget randomly
        cursor.execute("""
            UPDATE departments 
            SET manager_budget = FLOOR(1000000 + RAND() * 1000000)
            WHERE manager_budget IS NULL
        """)
        
        conn.commit()
        logger.info(f"Inserted {len(DEPARTMENTS)} departments successfully")
        
    except Error as e:
        logger.error(f"Error: {e}")
        if 'conn' in locals():
            conn.rollback()
        raise
    finally:
        if 'cursor' in locals():
            cursor.close()
        if 'conn' in locals():
            conn.close()

if __name__ == "__main__":
    main()

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\scripts\healthcheck.sh ######
#!/bin/bash
set -eo pipefail

MYSQL_USER=${MYSQL_HEALTHCHECK_USER:-$MYSQL_USER}
MYSQL_PASS=${MYSQL_HEALTHCHECK_PASSWORD:-$MYSQL_PASSWORD}

if ! mysqladmin ping -h"localhost" -u"$MYSQL_USER" -p"$MYSQL_PASS" --silent; then
    exit 1
fi

mysql -u"$MYSQL_USER" -p"$MYSQL_PASS" -e "SELECT 1;" >/dev/null 2>&1
exit $?

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\scripts\init-db.sh ######
#!/bin/bash
set -e

mysql -u root -p"$MYSQL_ROOT_PASSWORD" << EOSQL
-- Create users
CREATE USER IF NOT EXISTS '$MYSQL_USER'@'%' IDENTIFIED BY '$MYSQL_PASSWORD';
CREATE USER IF NOT EXISTS '$MYSQL_MONITOR_USER'@'%' IDENTIFIED BY '$MYSQL_MONITOR_PASSWORD';

-- Grant permissions
GRANT ALL PRIVILEGES ON $MYSQL_DATABASE.* TO '$MYSQL_USER'@'%';
GRANT SELECT, PROCESS, REPLICATION CLIENT ON *.* TO '$MYSQL_MONITOR_USER'@'%';
GRANT SELECT ON performance_schema.* TO '$MYSQL_MONITOR_USER'@'%';
GRANT SELECT ON sys.* TO '$MYSQL_MONITOR_USER'@'%';
GRANT SELECT ON information_schema.* TO '$MYSQL_MONITOR_USER'@'%';

-- Enable monitoring
UPDATE performance_schema.setup_instruments 
SET ENABLED = 'YES', TIMED = 'YES'
WHERE NAME LIKE '%statement/%' 
   OR NAME LIKE '%stage/%'
   OR NAME LIKE '%wait/%'
   OR NAME LIKE '%memory/%';

UPDATE performance_schema.setup_consumers
SET ENABLED = 'YES'
WHERE NAME LIKE '%events%';

FLUSH PRIVILEGES;
EOSQL

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\scripts\load_data.py ######
#!/usr/bin/env python3
import mysql.connector
import random
from datetime import date, timedelta
from faker import Faker
import os
import logging
import time
from mysql.connector import Error

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def get_db_config():
    return {
        'host': os.getenv('MYSQL_HOST', 'localhost'),
        'user': os.getenv('MYSQL_USER', 'myuser'),
        'password': os.getenv('MYSQL_PASSWORD', 'userpass123'),
        'database': os.getenv('MYSQL_DATABASE', 'employees'),
        'raise_on_warnings': True
    }

def generate_employee_batch(start_emp_no, batch_size, fake):
    employees = []
    salaries = []
    dept_assignments = []
    departments = ['d001', 'd002', 'd003', 'd004', 'd005', 
                  'd006', 'd007', 'd008', 'd009', 'd010']
    
    for i in range(batch_size):
        emp_no = start_emp_no + i
        birth_date = fake.date_between(start_date='-65y', end_date='-25y')
        hire_date = fake.date_between(start_date='-20y', end_date='today')
        
        employees.append((
            emp_no,
            birth_date,
            fake.first_name(),
            fake.last_name(),
            random.choice(['M', 'F']),
            hire_date
        ))
        
        # Generate salary history
        current_date = hire_date
        for _ in range(random.randint(2, 4)):
            salary = random.randint(30000, 150000)
            if random.random() < 0.05:  # 5% outliers
                salary = int(salary * random.uniform(1.5, 2.5))
            
            to_date = date(9999, 1, 1) if _ == 0 else \
                     current_date + timedelta(days=random.randint(365, 1095))
            
            salaries.append((emp_no, salary, current_date, to_date))
            current_date = to_date
        
        # Department assignments
        num_depts = random.randint(1, 2)
        selected_depts = random.sample(departments, num_depts)
        for dept_no in selected_depts:
            dept_assignments.append((
                emp_no,
                dept_no,
                hire_date,
                date(9999, 1, 1)
            ))
    
    return employees, salaries, dept_assignments

def main():
    batch_size = int(os.getenv('BATCH_SIZE', 1000))
    total_employees = int(os.getenv('TOTAL_EMPLOYEES', 10000))
    
    try:
        conn = mysql.connector.connect(**get_db_config())
        cursor = conn.cursor()
        
        fake = Faker()
        logger.info(f"Starting data load: {total_employees} employees")
        
        for batch_start in range(0, total_employees, batch_size):
            start_time = time.time()
            
            employees, salaries, dept_assignments = generate_employee_batch(
                batch_start + 1000000,  # Starting emp_no
                min(batch_size, total_employees - batch_start),
                fake
            )
            
            cursor.executemany("""
                INSERT INTO employees 
                (emp_no, birth_date, first_name, last_name, gender, hire_date)
                VALUES (%s, %s, %s, %s, %s, %s)
            """, employees)
            
            cursor.executemany("""
                INSERT INTO salaries 
                (emp_no, salary, from_date, to_date)
                VALUES (%s, %s, %s, %s)
            """, salaries)
            
            cursor.executemany("""
                INSERT INTO dept_emp 
                (emp_no, dept_no, from_date, to_date)
                VALUES (%s, %s, %s, %s)
            """, dept_assignments)
            
            conn.commit()
            
            elapsed = time.time() - start_time
            logger.info(
                f"Batch {batch_start//batch_size + 1} completed in {elapsed:.2f}s"
            )
            
    except Error as e:
        logger.error(f"Database error: {e}")
        if 'conn' in locals():
            conn.rollback()
        raise
    finally:
        if 'cursor' in locals():
            cursor.close()
        if 'conn' in locals():
            conn.close()

if __name__ == "__main__":
    main()

###### File: C:\Users\hi\Desktop\SourceCode\db-perf-env\mysql\db-setup\scripts\run_load_data.sh ######
#!/bin/bash
set -e

echo "Waiting for MySQL to be ready..."
while ! mysqladmin ping -h"localhost" --silent; do
    sleep 2
done

echo "Starting data load process..."
python3 /docker-entrypoint-initdb.d/load_data.py

