services:
  mysql:
    build:
      context: ./db-setup
      dockerfile: Dockerfile
    container_name: mysql-db
    profiles: ["docker"]
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_MONITOR_USER: ${MYSQL_MONITOR_USER}
      MYSQL_MONITOR_PASSWORD: ${MYSQL_MONITOR_PASSWORD}
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - mysql_logs:/var/log/mysql
      - ./db-setup/config:/etc/mysql/conf.d
    networks:
      - backend
    deploy:
      resources:
        limits:
          memory: 2G
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "$MYSQL_USER", "-p$MYSQL_PASSWORD"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    command: ['mysqld', '--character-set-server=utf8mb4', '--collation-server=utf8mb4_unicode_ci']

  api:
    build:
      context: ./services/api
      dockerfile: Dockerfile
    container_name: employees-api
    profiles: ["docker", "local"]
    environment:
      MYSQL_HOST: ${MYSQL_HOST}
      MYSQL_PORT: ${MYSQL_PORT:-3306}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      API_PORT: ${API_PORT}
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
      NEW_RELIC_APP_NAME: ${NEW_RELIC_APP_NAME}
      NODE_ENV: ${NODE_ENV:-production}
    ports:
      - "${API_PORT}:3000"
    networks:
      - backend
    depends_on:
      mysql:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
    healthcheck:
      test: curl -f http://localhost:3000/health || exit 1
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 15s

  load-generator:
    build:
      context: ./services/load-generator
      dockerfile: Dockerfile
    profiles: ["docker", "local"]
    environment:
      API_URL: http://api:3000
      K6_VUS: ${K6_VUS:-10}
      K6_DURATION: ${K6_DURATION:-5m}
    networks:
      - backend
    depends_on:
      api:
        condition: service_healthy

networks:
  backend:
    driver: bridge

volumes:
  mysql_data:
  mysql_logs: